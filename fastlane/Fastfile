######################### PUBLIC LANES ##########################

desc "Submit a new Beta Build to Crashlytics"
lane :staging do |options|
  fabric(options)
end

########################## PRE ACTIONS ##########################

before_all do
  
end

######################### PRIVATE LANES #########################
#---------------------------- Fabric ---------------------------#

private_lane :fabric do |options|
  # This lane can run only on specific branches
  ensure_git_branch(
    # branch: "(develop|master|release\\S+|hotfix\\S+)"
    branch: "cd"
    )

    # New version number has to be specified explicitly
    version_number = options[:version_number]
    raise "Missing version number: use version_number parameter" unless version_number != nil
    Actions.lane_context[SharedValues::VERSION_NUMBER] = version_number
    Actions.lane_context[SharedValues::BUILD_NUMBER] = increment_build_number

    # Automatically updates version number and updates xcodeproj
    increment_version_number(version_number: version_number)

    # Runs all tests, stops deployment if there are any failures
    scan(
      workspace: "Conferences.xcworkspace",
      scheme: "Conferences",
      clean: true
  )

    # Here we'll somehow collect a full changelog
    jira_changelog = "Список изменений:\n#{jira_only_changelog}"

    gym(
      scheme: "Conferences",
      configuration: "Release",
      clean: true,
      provisioning_profile_path: 'fastlane/RamblerConferencesDevelopment.mobileprovision'
    )

    # Uploads the final IPA file to Fabric
  crashlytics(
      crashlytics_path: "Pods/Crashlytics",
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      notifications: "NO",
      notes: jira_changelog,
      ipa_path: "Conferences.ipa"
    )
end

lane :nightly do
  import_from_git(url: 'git@gitlab.rambler.ru:ramblerco-ios/fastfile-nightly.git',
                path: 'fastlane/Fastfile')
end

######################### POST ACTIONS ##########################

# This lane is called, only if the executed lane was successful
after_all do |lane|
  # Some cleaning
    clean_build_artifacts
    clear_derived_data

  # Makes a bump version commit
    complete_version_number = version_string(
      Actions.lane_context[SharedValues::VERSION_NUMBER], 
      Actions.lane_context[SharedValues::BUILD_NUMBER]
    )
    commit_version_bump(
    message: "Увеличен номер версии до #{complete_version_number}",
    xcodeproj: ENV['XCODEPROJ_NAME'],
    force: true
    )
end

############################# UTIL ##############################

def version_string(version_number, build_number)
  "#{version_number}(#{build_number})"
end

def jira_only_changelog
  raw_changelog = changelog_from_git_commits(
      # tag_match_pattern: 'dev/*', # Optional, lets you search for a tag name that matches a glob(7) pattern
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
  )
  regexp = Regexp.new('(LJIOS-[0-9]*)').freeze

    messages = raw_changelog.split("\n").select { |message|
      message.match(regexp)
    }.map { |message|
      "https://jira.rambler.ru/browse/#{message.match(regexp)[1]}"
    }
    messages.count > 0 ? messages.join("\n") : "Нет закрытых JIRA-тасков"
end
